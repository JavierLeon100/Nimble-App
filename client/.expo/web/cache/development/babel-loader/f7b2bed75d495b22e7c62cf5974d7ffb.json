{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExponentPedometer from \"./ExponentPedometer\";\nvar PedometerEventEmitter = new EventEmitter(ExponentPedometer);\nexport function watchStepCount(callback) {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\nexport function getStepCountAsync(start, end) {\n  return _regeneratorRuntime.async(function getStepCountAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentPedometer.getStepCountAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n\n        case 2:\n          invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ExponentPedometer.isAvailableAsync());\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentPedometer.getPermissionsAsync) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", defaultPermissionsResponse);\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExponentPedometer.getPermissionsAsync());\n\n        case 6:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExponentPedometer.requestPermissionsAsync) {\n            _context4.next = 4;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", defaultPermissionsResponse);\n\n        case 4:\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(ExponentPedometer.requestPermissionsAsync());\n\n        case 6:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar defaultPermissionsResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED\n};\nexport { PermissionStatus };","map":{"version":3,"sources":["../src/Pedometer.ts"],"names":[],"mappings":";AAAA,SAGE,gBAHF,EAIE,YAJF,EAME,mBANF,QAOO,mBAPP;AAQA,OAAO,SAAP,MAAsB,WAAtB;AAEA,OAAO,iBAAP;AAEA,IAAM,qBAAqB,GAAG,IAAI,YAAJ,CAAiB,iBAAjB,CAA9B;AAqBA,OAAM,SAAU,cAAV,CAAyB,QAAzB,EAA0D;AAC9D,SAAO,qBAAqB,CAAC,WAAtB,CAAkC,0BAAlC,EAA8D,QAA9D,CAAP;AACD;AAaD,OAAO,SAAe,iBAAf,CAAiC,KAAjC,EAA8C,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,iBAAiB,CAAC,iBADlB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,mBAAxB,EAA6C,mBAA7C,CAFH;;AAAA;AAIL,UAAA,SAAS,CAAC,KAAK,IAAI,GAAV,EAAe,sDAAf,CAAT;AAJK;AAAA,2CAKQ,iBAAiB,CAAC,iBAAlB,CAAoC,KAAK,CAAC,OAAN,EAApC,EAAqD,GAAG,CAAC,OAAJ,EAArD,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQ,iBAAiB,CAAC,gBAAlB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAe,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,iBAAiB,CAAC,mBADlB;AAAA;AAAA;AAAA;;AAAA,4CAEI,0BAFJ;;AAAA;AAAA;AAAA,2CAIU,iBAAiB,CAAC,mBAAlB,EAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAe,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,iBAAiB,CAAC,uBADlB;AAAA;AAAA;AAAA;;AAAA,4CAEI,0BAFJ;;AAAA;AAAA;AAAA,2CAIU,iBAAiB,CAAC,uBAAlB,EAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,IAAM,0BAA0B,GAAuB;AACrD,EAAA,OAAO,EAAE,IAD4C;AAErD,EAAA,OAAO,EAAE,OAF4C;AAGrD,EAAA,WAAW,EAAE,IAHwC;AAIrD,EAAA,MAAM,EAAE,gBAAgB,CAAC;AAJ4B,CAAvD;AAOA,SAA2C,gBAA3C","sourcesContent":["import {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExponentPedometer from './ExponentPedometer';\n\nconst PedometerEventEmitter = new EventEmitter(ExponentPedometer);\n\n// @needsAudit\nexport type PedometerResult = {\n  /**\n   * Number of steps taken between the given dates.\n   */\n  steps: number;\n};\n\n// @docsMissing\nexport type PedometerUpdateCallback = (result: PedometerResult) => void;\n\n// @needsAudit\n/**\n * Subscribe to pedometer updates.\n * @param callback A callback that is invoked when new step count data is available. The callback is\n * provided with a single argument that is [`PedometerResult`](#pedometerresult).\n * @return Returns a [`Subscription`](#subscription) that enables you to call\n * `remove()` when you would like to unsubscribe the listener.\n */\nexport function watchStepCount(callback: PedometerUpdateCallback): Subscription {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\n// @needsAudit\n/**\n * Get the step count between two dates.\n * @param start A date indicating the start of the range over which to measure steps.\n * @param end A date indicating the end of the range over which to measure steps.\n * @return Returns a promise that fulfills with a [`PedometerResult`](#pedometerresult).\n *\n * As [Apple documentation states](https://developer.apple.com/documentation/coremotion/cmpedometer/1613946-querypedometerdatafromdate?language=objc):\n * > Only the past seven days worth of data is stored and available for you to retrieve. Specifying\n * > a start date that is more than seven days in the past returns only the available data.\n */\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  if (!ExponentPedometer.getStepCountAsync) {\n    throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n  }\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\n// @needsAudit\n/**\n * Returns whether the pedometer is enabled on the device.\n * @return Returns a promise that fulfills with a `boolean`, indicating whether the pedometer is\n * available on this device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExponentPedometer.isAvailableAsync();\n}\n\n// @docsMissing\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.getPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.getPermissionsAsync();\n  }\n}\n\n// @docsMissing\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.requestPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.requestPermissionsAsync();\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport { Subscription, PermissionResponse, PermissionStatus, PermissionExpiration };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}