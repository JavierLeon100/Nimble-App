{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Center, FormControl, Heading, HStack, Text, VStack, Input, Stack, Slider, Box, TextArea, ScrollView, Switch, Checkbox, Button, Image } from \"native-base\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { useRef, useState } from \"react\";\nimport { colors } from \"../utilis/colors\";\nimport { Gyroscope } from 'expo-sensors';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { pickImage, takePhoto } from \"../utilis/camera/pickAndTakePic\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ModalDetailForActivity(_ref) {\n  var handleShowModal = _ref.handleShowModal;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      video = _useState4[0],\n      setVideo = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      onRecording = _useState6[0],\n      setOnRecording = _useState6[1];\n\n  var videoRef = useRef(null);\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cameraPermission = _useState8[0],\n      setCameraPermission = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      recordVideoPermission = _useState10[0],\n      setRecordVideoPermission = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      audioPermission = _useState12[0],\n      setAudioPermission = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      sliderValue = _useState14[0],\n      setSliderValue = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      focus = _useState16[0],\n      setFocus = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      timer = _useState18[0],\n      setTimer = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      urgent = _useState20[0],\n      setUrgent = _useState20[1];\n\n  var _useState21 = useState({\n    x: 0,\n    y: 0,\n    z: 0\n  }),\n      _useState22 = _slicedToArray(_useState21, 2),\n      gyroValue = _useState22[0],\n      setGyroValue = _useState22[1];\n\n  var x = gyroValue.x,\n      y = gyroValue.y,\n      z = gyroValue.z;\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      startGyro = _useState24[0],\n      setStartGyro = _useState24[1];\n\n  var _useState25 = useState(null),\n      _useState26 = _slicedToArray(_useState25, 2),\n      sub = _useState26[0],\n      setSub = _useState26[1];\n\n  var _useForm = useForm({\n    defaultValues: {\n      title: \"\"\n    }\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.formState.errors,\n      control = _useForm.control;\n\n  var onSubmit = function onSubmit(data) {\n    data.rewardPoints = sliderValue;\n    console.log(data);\n  };\n\n  var sliderOnChange = function sliderOnChange(v) {\n    setSliderValue(Math.floor(v));\n  };\n\n  var sliderOnChangeEnd = function sliderOnChangeEnd(v) {\n    setSliderValue(Math.floor(v));\n  };\n\n  var handleGyro = function handleGyro() {\n    return _regeneratorRuntime.async(function handleGyro$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Gyroscope.isAvailableAsync());\n\n          case 2:\n            if (!startGyro) {\n              Gyroscope.addListener(function (data) {\n                return setGyroValue(data);\n              });\n            } else {\n              Gyroscope.removeAllListeners();\n            }\n\n            Gyroscope.setUpdateInterval(2000);\n            setStartGyro(function (prev) {\n              return !prev;\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var roundNum = function roundNum(num) {\n    return Math.round(num * 100) / 100;\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsx(Center, {\n      children: _jsxs(VStack, {\n        w: \"100%\",\n        children: [_jsxs(HStack, {\n          alignItems: \"center\",\n          justifyContent: \"space-around\",\n          mt: \"60\",\n          mb: \"30\",\n          children: [_jsx(Text, {\n            onPress: function onPress() {\n              return handleShowModal(false);\n            },\n            children: \"Cancel\"\n          }), _jsx(Heading, {\n            children: \"New Task\"\n          }), _jsx(Text, {\n            children: \"Save\"\n          })]\n        }), _jsx(Center, {\n          children: _jsxs(FormControl, {\n            w: \"80%\",\n            children: [_jsxs(Stack, {\n              mb: \"5\",\n              children: [_jsx(FormControl.Label, {\n                children: \"Title\"\n              }), _jsx(Controller, {\n                control: control,\n                render: function render(_ref2) {\n                  var _ref2$field = _ref2.field,\n                      onChange = _ref2$field.onChange,\n                      onBlur = _ref2$field.onBlur,\n                      value = _ref2$field.value;\n                  return _jsx(Input, {\n                    p: 2,\n                    placeholder: \"Title\",\n                    borderRadius: \"10\",\n                    onChangeText: onChange,\n                    value: value\n                  });\n                },\n                name: \"title\"\n              })]\n            }), _jsxs(VStack, {\n              mb: \"5\",\n              children: [_jsx(Text, {\n                children: \"assign to\"\n              }), _jsxs(HStack, {\n                space: \"2\",\n                children: [_jsx(AntDesign, {\n                  name: \"user\",\n                  size: 24,\n                  color: \"black\"\n                }), _jsx(AntDesign, {\n                  name: \"user\",\n                  size: 24,\n                  color: \"black\"\n                }), _jsx(AntDesign, {\n                  name: \"user\",\n                  size: 24,\n                  color: \"black\"\n                }), _jsx(AntDesign, {\n                  name: \"user\",\n                  size: 24,\n                  color: \"black\"\n                })]\n              })]\n            }), _jsxs(Stack, {\n              mb: \"5\",\n              children: [_jsx(FormControl.Label, {\n                children: \"Data/time\"\n              }), _jsx(Controller, {\n                control: control,\n                render: function render(_ref3) {\n                  var _ref3$field = _ref3.field,\n                      onChange = _ref3$field.onChange,\n                      onBlur = _ref3$field.onBlur,\n                      value = _ref3$field.value;\n                  return _jsx(Input, {\n                    p: 2,\n                    placeholder: \"Data/time\",\n                    borderRadius: \"10\",\n                    onChangeText: onChange,\n                    value: value\n                  });\n                },\n                name: \"date\"\n              })]\n            }), _jsxs(VStack, {\n              mb: \"5\",\n              children: [_jsx(Text, {\n                children: \"Assigned Points\"\n              }), _jsxs(Box, {\n                bg: colors.gray,\n                mt: \"3\",\n                borderRadius: \"10\",\n                p: \"5\",\n                children: [_jsxs(Slider, {\n                  size: \"lg\",\n                  defaultValue: 0,\n                  onChange: sliderOnChange,\n                  onChangeEnd: sliderOnChangeEnd,\n                  maxValue: 100,\n                  children: [_jsx(Slider.Track, {\n                    children: _jsx(Slider.FilledTrack, {})\n                  }), _jsx(Slider.Thumb, {})]\n                }), _jsx(Text, {\n                  textAlign: \"center\",\n                  children: sliderValue\n                })]\n              }), _jsx(Text, {\n                mt: \"2\",\n                fontSize: \"10\",\n                children: \"Required Points\"\n              })]\n            }), _jsxs(VStack, {\n              mb: \"5\",\n              children: [_jsx(Text, {\n                children: \"Image\"\n              }), image ? _jsx(Image, {\n                source: {\n                  uri: image\n                },\n                style: {\n                  width: 200,\n                  height: 200\n                },\n                alt: \"image\"\n              }) : null, _jsxs(HStack, {\n                justifyContent: \"space-around\",\n                mt: \"3\",\n                children: [_jsx(AntDesign, {\n                  name: \"picture\",\n                  size: 70,\n                  color: \"black\",\n                  onPress: pickImage\n                }), _jsx(AntDesign, {\n                  name: \"camera\",\n                  size: 70,\n                  color: \"black\",\n                  onPress: function onPress() {\n                    return takePhoto(setAudioPermission, setCameraPermission, setRecordVideoPermission, setImage);\n                  }\n                })]\n              })]\n            }), _jsxs(Stack, {\n              mb: \"5\",\n              children: [_jsx(FormControl.Label, {\n                children: \"Notes\"\n              }), _jsx(Controller, {\n                control: control,\n                render: function render(_ref4) {\n                  var _ref4$field = _ref4.field,\n                      onChange = _ref4$field.onChange,\n                      onBlur = _ref4$field.onBlur,\n                      value = _ref4$field.value;\n                  return _jsx(TextArea, {\n                    p: 2,\n                    placeholder: \"Data/time\",\n                    borderRadius: \"10\",\n                    height: \"150\",\n                    onChangeText: onChange,\n                    value: value\n                  });\n                },\n                name: \"notes\"\n              })]\n            }), _jsxs(VStack, {\n              mb: \"5\",\n              children: [_jsxs(HStack, {\n                justifyContent: \"space-between\",\n                alignContent: \"center\",\n                mb: \"4\",\n                children: [_jsx(Text, {\n                  children: \"Timer\"\n                }), _jsx(Controller, {\n                  name: \"timer\",\n                  control: control,\n                  render: function render(_ref5) {\n                    var _ref5$field = _ref5.field,\n                        onChange = _ref5$field.onChange,\n                        value = _ref5$field.value,\n                        name = _ref5$field.name,\n                        ref = _ref5$field.ref;\n                    return _jsx(Switch, {\n                      size: \"lg\",\n                      onToggle: function onToggle() {\n                        return setTimer(function (prev) {\n                          return !prev;\n                        });\n                      },\n                      isChecked: value,\n                      onChange: onChange\n                    });\n                  }\n                })]\n              }), _jsxs(HStack, {\n                justifyContent: \"space-between\",\n                alignContent: \"center\",\n                mb: \"4\",\n                children: [_jsx(Text, {\n                  children: \"Urgent\"\n                }), _jsx(Switch, {\n                  size: \"lg\",\n                  onToggle: function onToggle() {\n                    return setUrgent(function (prev) {\n                      return !prev;\n                    });\n                  },\n                  isChecked: urgent\n                })]\n              })]\n            }), _jsxs(VStack, {\n              mb: \"5\",\n              children: [_jsxs(HStack, {\n                justifyContent: \"space-between\",\n                alignContent: \"center\",\n                mb: \"4\",\n                children: [_jsx(Text, {\n                  children: \"Focus Mode\"\n                }), _jsx(Switch, {\n                  size: \"lg\",\n                  onToggle: handleGyro,\n                  isChecked: startGyro\n                }), _jsx(Text, {\n                  children: roundNum(x) + \", \" + roundNum(y) + \", \" + roundNum(z)\n                })]\n              }), _jsxs(HStack, {\n                justifyContent: \"space-between\",\n                alignContent: \"center\",\n                mb: \"4\",\n                children: [_jsx(Text, {\n                  children: \"Recorded Brightness \"\n                }), _jsx(Checkbox, {\n                  size: \"lg\"\n                })]\n              }), _jsxs(HStack, {\n                justifyContent: \"space-between\",\n                alignContent: \"center\",\n                mb: \"4\",\n                children: [_jsx(Text, {\n                  children: \"Recorded Device Motion \"\n                }), _jsx(Checkbox, {\n                  size: \"lg\"\n                })]\n              })]\n            }), _jsxs(VStack, {\n              space: \"6\",\n              mb: \"70\",\n              children: [_jsx(Button, {\n                p: \"5\",\n                borderRadius: \"10\",\n                title: \"submit\",\n                onPress: handleSubmit(onSubmit),\n                children: \"Save\"\n              }), _jsx(Center, {\n                children: _jsx(Button, {\n                  w: \"80%\",\n                  p: \"4\",\n                  borderRadius: \"10\",\n                  onPress: function onPress() {\n                    return handleShowModal(false);\n                  },\n                  children: \"Cancel/Delete\"\n                })\n              })]\n            })]\n          })\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/appea/OneDrive/デスクトップ/nimble/nimble-sono2/client/src/component/modal/modalDetailForActivity.js"],"names":["Center","FormControl","Heading","HStack","Text","VStack","Input","Stack","Slider","Box","TextArea","ScrollView","Switch","Checkbox","Button","Image","AntDesign","useRef","useState","colors","Gyroscope","useForm","Controller","pickImage","takePhoto","ModalDetailForActivity","handleShowModal","image","setImage","video","setVideo","onRecording","setOnRecording","videoRef","cameraPermission","setCameraPermission","recordVideoPermission","setRecordVideoPermission","audioPermission","setAudioPermission","sliderValue","setSliderValue","focus","setFocus","timer","setTimer","urgent","setUrgent","x","y","z","gyroValue","setGyroValue","startGyro","setStartGyro","sub","setSub","defaultValues","title","handleSubmit","watch","errors","formState","control","onSubmit","data","rewardPoints","console","log","sliderOnChange","v","Math","floor","sliderOnChangeEnd","handleGyro","isAvailableAsync","addListener","removeAllListeners","setUpdateInterval","prev","roundNum","num","round","field","onChange","onBlur","value","gray","uri","width","height","name","ref"],"mappings":"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","sourcesContent":["import { Center, FormControl, Heading, HStack, Text, VStack, Input, Stack, Slider, Box, TextArea, ScrollView, Switch, Checkbox, Button, Image } from \"native-base\";\nimport { AntDesign } from '@expo/vector-icons'; \nimport { useRef, useState } from \"react\";\nimport { colors } from \"../utilis/colors\";\nimport { Gyroscope } from 'expo-sensors';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { pickImage, takePhoto } from \"../utilis/camera/pickAndTakePic\";\n\n\nexport default function ModalDetailForActivity({handleShowModal}){\n    const [image, setImage] = useState();\n    const [video, setVideo] = useState()\n    const [onRecording, setOnRecording] = useState(false)\n    const videoRef = useRef(null)\n\n    const [cameraPermission, setCameraPermission] = useState()\n    const [recordVideoPermission, setRecordVideoPermission] = useState()\n    const [audioPermission, setAudioPermission] = useState()\n\n    const [sliderValue, setSliderValue] = useState(0)\n    const [focus, setFocus] = useState(false)\n    const [timer, setTimer] = useState(false)\n    const [urgent, setUrgent] = useState(false)\n    const [gyroValue, setGyroValue] = useState({\n        x : 0,\n        y : 0,\n        z : 0,\n    })\n    const {x, y, z} = gyroValue\n    const [startGyro, setStartGyro] = useState(false)\n    const [sub, setSub] = useState(null)\n    const { handleSubmit, watch, formState: { errors }, control } = useForm({\n        defaultValues : {\n            title : \"\"\n        }\n    });\n    const onSubmit = data => {\n        data.rewardPoints = sliderValue\n        console.log(data)\n    }\n\n    const sliderOnChange = (v)=>{\n            setSliderValue(Math.floor(v))\n    }\n\n    const sliderOnChangeEnd = (v)=>{\n        setSliderValue(Math.floor(v))\n    }\n\n    const handleGyro = async ()=>{\n        await Gyroscope.isAvailableAsync()\n        if(!startGyro){\n            Gyroscope.addListener(data=>setGyroValue(data))\n        } else {\n            Gyroscope.removeAllListeners()\n        }\n        Gyroscope.setUpdateInterval(2000)\n        setStartGyro(prev=>!prev)\n        \n        \n    }\n\n    const roundNum = (num)=>{\n        \n        return Math.round(num * 100) / 100\n    }\n\n    return (\n    <ScrollView>\n        <Center>\n            <VStack w=\"100%\">\n            <HStack alignItems=\"center\" justifyContent=\"space-around\" mt=\"60\" mb=\"30\">\n                <Text onPress={()=>handleShowModal(false)}>Cancel</Text>\n                <Heading>New Task</Heading>\n                <Text>Save</Text>\n            </HStack>\n\n            <Center>\n                <FormControl w=\"80%\">\n                    <Stack mb=\"5\">\n                        <FormControl.Label>Title</FormControl.Label>\n                        <Controller \n                        control={control}\n                        render={({ field: { onChange, onBlur, value } })=>(\n                            <Input p={2} placeholder=\"Title\" borderRadius=\"10\" \n                            onChangeText={onChange} value={value}/>\n                        )}\n                        name = \"title\"\n                        />\n                    </Stack>\n\n                    <VStack mb=\"5\">\n                        <Text>assign to</Text>\n                        <HStack space=\"2\">\n                        <AntDesign name=\"user\" size={24} color=\"black\" />\n                        <AntDesign name=\"user\" size={24} color=\"black\" />\n                        <AntDesign name=\"user\" size={24} color=\"black\" />\n                        <AntDesign name=\"user\" size={24} color=\"black\" />\n                        </HStack>\n                    </VStack>\n\n                    <Stack mb=\"5\">\n                        <FormControl.Label>Data/time</FormControl.Label>\n                        <Controller \n                        control={control}\n                        render={({ field: { onChange, onBlur, value } })=>(\n                            <Input p={2} placeholder=\"Data/time\"  borderRadius=\"10\" \n                            onChangeText={onChange} value={value}/>\n                        )}\n                        name = \"date\"\n                        />\n                    </Stack>\n\n                    <VStack mb=\"5\">\n                        <Text>Assigned Points</Text>\n                        <Box bg={colors.gray}  mt=\"3\"  borderRadius=\"10\" p=\"5\">\n                            <Slider size=\"lg\" defaultValue={0} onChange={sliderOnChange} onChangeEnd={sliderOnChangeEnd} maxValue={100} >\n                            <Slider.Track>\n                                <Slider.FilledTrack />\n                            </Slider.Track>\n                            <Slider.Thumb />\n                            </Slider>\n                            <Text textAlign=\"center\">{sliderValue}</Text>\n                        </Box>\n                        <Text mt=\"2\" fontSize=\"10\">Required Points</Text>\n                    </VStack>\n\n                    <VStack  mb=\"5\">\n                    <Text>Image</Text>\n                    {image ?   <Image source={{ uri: image }} style={{ width: 200, height: 200 }} alt=\"image\"/> : null}\n                    <HStack justifyContent=\"space-around\" mt=\"3\">\n                        <AntDesign name=\"picture\" size={70} color=\"black\" onPress={pickImage}/>\n                        <AntDesign name=\"camera\" size={70} color=\"black\" onPress={()=>takePhoto(setAudioPermission,setCameraPermission,setRecordVideoPermission, setImage)}/>\n                    </HStack>\n                    </VStack>\n\n                    <Stack mb=\"5\">\n                        <FormControl.Label>Notes</FormControl.Label>\n                        <Controller \n                        control={control}\n                        render={({ field: { onChange, onBlur, value } })=>(\n                            <TextArea p={2} placeholder=\"Data/time\" borderRadius=\"10\" height=\"150\" onChangeText={onChange} value={value}/>\n                            \n                        )}\n                        name = \"notes\"\n                        />\n                    </Stack>\n\n                    <VStack mb=\"5\">\n                        <HStack justifyContent=\"space-between\" alignContent=\"center\" mb=\"4\">\n                            <Text>Timer</Text>\n                            <Controller \n                            name=\"timer\"\n                            control={control}\n                            render={({\n                                field : {onChange, value, name, ref}\n                            })=>(\n                                <Switch  size=\"lg\" onToggle={()=>setTimer(prev=>!prev)} isChecked={value} onChange={onChange}/>\n                                \n                            )}\n                            />\n                        </HStack>\n\n                        <HStack  justifyContent=\"space-between\" alignContent=\"center\" mb=\"4\">\n                            <Text>Urgent</Text>\n                        <Switch  size=\"lg\" onToggle={()=>setUrgent(prev=>!prev)} isChecked={urgent}/>\n                        </HStack>\n                    </VStack>\n\n                    <VStack mb=\"5\">\n                        <HStack justifyContent=\"space-between\" alignContent=\"center\" mb=\"4\">\n                        <Text>Focus Mode</Text>\n                        <Switch size=\"lg\" onToggle={handleGyro} isChecked={startGyro} />\n                        <Text>{`${roundNum(x)}, ${roundNum(y)}, ${roundNum(z)}`}</Text>\n                        </HStack>\n\n                        <HStack justifyContent=\"space-between\" alignContent=\"center\" mb=\"4\">\n                        <Text>Recorded Brightness </Text>\n                        <Checkbox size=\"lg\" />\n                        </HStack>\n\n                        <HStack justifyContent=\"space-between\" alignContent=\"center\" mb=\"4\">\n                        <Text>Recorded Device Motion </Text>\n                        <Checkbox size=\"lg\" />\n                        </HStack>\n                    </VStack>\n\n                    <VStack space=\"6\" mb=\"70\">                    \n                    <Button p=\"5\" borderRadius=\"10\" title=\"submit\" onPress={handleSubmit(onSubmit)}>Save</Button>\n                    <Center>\n                    <Button w=\"80%\" p=\"4\" borderRadius=\"10\" onPress={()=>handleShowModal(false)} >Cancel/Delete</Button>\n                    </Center>\n                    </VStack>\n                </FormControl>\n            </Center>\n            </VStack>\n        </Center>\n    </ScrollView>\n    )\n}"]},"metadata":{},"sourceType":"module"}