{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Gyroscope } from 'expo-sensors';\nexport var handleGyro = function handleGyro(setStartGyro) {\n  return _regeneratorRuntime.async(function handleGyro$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Gyroscope.isAvailableAsync());\n\n        case 2:\n          if (!startGyro) {\n            Gyroscope.addListener(function (data) {\n              return setGyroValue(data);\n            });\n          } else {\n            Gyroscope.removeAllListeners();\n          }\n\n          Gyroscope.setUpdateInterval(2000);\n          setStartGyro(function (prev) {\n            return !prev;\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var roundNum = function roundNum(num) {\n  return Math.round(num * 100) / 100;\n};","map":{"version":3,"sources":["C:/Users/appea/OneDrive/デスクトップ/nimble/nimble-sono2/client/src/component/utilis/gyrocope/setGyroscope.js"],"names":["Gyroscope","handleGyro","setStartGyro","isAvailableAsync","startGyro","addListener","data","setGyroValue","removeAllListeners","setUpdateInterval","prev","roundNum","num","Math","round"],"mappings":";AAAA,SAASA,SAAT,QAA0B,cAA1B;AAWA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAChBF,SAAS,CAACG,gBAAV,EADgB;;AAAA;AAEtB,cAAG,CAACC,SAAJ,EAAc;AACVJ,YAAAA,SAAS,CAACK,WAAV,CAAsB,UAAAC,IAAI;AAAA,qBAAEC,YAAY,CAACD,IAAD,CAAd;AAAA,aAA1B;AACH,WAFD,MAEO;AACHN,YAAAA,SAAS,CAACQ,kBAAV;AACH;;AACDR,UAAAA,SAAS,CAACS,iBAAV,CAA4B,IAA5B;AACAP,UAAAA,YAAY,CAAC,UAAAQ,IAAI;AAAA,mBAAE,CAACA,IAAH;AAAA,WAAL,CAAZ;;AARsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAYP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAO;AAC3B,SAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,GAA/B;AACH,CAFM","sourcesContent":["import { Gyroscope } from 'expo-sensors';\r\n\r\n\r\n// const [gyroValue, setGyroValue] = useState({\r\n//     x : 0,\r\n//     y : 0,\r\n//     z : 0,\r\n// })\r\n// const {x, y, z} = gyroValue\r\n// const [startGyro, setStartGyro] = useState(false)\r\n\r\nexport const handleGyro = async (setStartGyro)=>{\r\n    await Gyroscope.isAvailableAsync()\r\n    if(!startGyro){\r\n        Gyroscope.addListener(data=>setGyroValue(data))\r\n    } else {\r\n        Gyroscope.removeAllListeners()\r\n    }\r\n    Gyroscope.setUpdateInterval(2000)\r\n    setStartGyro(prev=>!prev)\r\n}\r\n\r\n\r\nexport const roundNum = (num)=>{\r\n    return Math.round(num * 100) / 100\r\n}"]},"metadata":{},"sourceType":"module"}