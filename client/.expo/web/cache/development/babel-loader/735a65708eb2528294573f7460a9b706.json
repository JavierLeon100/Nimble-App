{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var startRecordVideo = function startRecordVideo(videoRef, setVideo) {\n  var _await$videoRef$curre, uri;\n\n  return _regeneratorRuntime.async(function startRecordVideo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(videoRef.current.recordAsync({\n            quality: '1080p'\n          }));\n\n        case 3:\n          _await$videoRef$curre = _context.sent;\n          uri = _await$videoRef$curre.uri;\n          alert(uri);\n          setVideo(uri);\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          alert(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};\nexport var stopRecordVideo = function stopRecordVideo(videoRef) {\n  var stopRec = videoRef.current.stopRecording();\n};\nexport var closeVideoRecording = function closeVideoRecording(setOnRecording) {\n  setOnRecording(false);\n};","map":{"version":3,"sources":["C:/Users/appea/OneDrive/デスクトップ/nimble/nimble-sono2/client/src/component/utilis/camera/recordVideo.js"],"names":["startRecordVideo","videoRef","setVideo","current","recordAsync","quality","uri","alert","stopRecordVideo","stopRec","stopRecording","closeVideoRecording","setOnRecording"],"mappings":";AAAA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEJD,QAAQ,CAACE,OAAT,CAAiBC,WAAjB,CAA6B;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAA7B,CAFI;;AAAA;AAAA;AAEjBC,UAAAA,GAFiB,yBAEjBA,GAFiB;AAGxBC,UAAAA,KAAK,CAACD,GAAD,CAAL;AACAJ,UAAAA,QAAQ,CAACI,GAAD,CAAR;AAJwB;AAAA;;AAAA;AAAA;AAAA;AAMxBC,UAAAA,KAAK,aAAL;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAUP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACP,QAAD,EAAY;AAEvC,MAAMQ,OAAO,GAAGR,QAAQ,CAACE,OAAT,CAAiBO,aAAjB,EAAhB;AACH,CAHM;AAKP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,cAAD,EAAkB;AACjDA,EAAAA,cAAc,CAAC,KAAD,CAAd;AACH,CAFM","sourcesContent":["export const startRecordVideo = async (videoRef, setVideo)=>{\r\n    try {\r\n        const {uri} = await videoRef.current.recordAsync({ quality: '1080p'})\r\n        alert(uri)\r\n        setVideo(uri)\r\n    } catch (error) {\r\n        alert(error)\r\n    } \r\n}\r\n\r\nexport const stopRecordVideo = (videoRef)=>{\r\n       \r\n    const stopRec = videoRef.current.stopRecording()\r\n}\r\n\r\nexport const closeVideoRecording = (setOnRecording)=>{\r\n    setOnRecording(false)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}