{"ast":null,"code":"import { HStack, Text, Center, Button, VStack } from \"native-base\";\nimport { colors } from \"../../utilis/colors\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { AntDesign } from '@expo/vector-icons';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Animated, { event, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming } from \"react-native-reanimated\";\nimport { PanGestureHandler } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function EachTask(_ref) {\n  var task = _ref.task,\n      handleShowModal = _ref.handleShowModal,\n      i = _ref.i;\n\n  var openButton = _jsx(Center, {\n    bg: colors.black,\n    borderRadius: \"15\",\n    position: \"absolute\",\n    top: \"0\",\n    w: \"80%\",\n    px: \"6\",\n    py: \"9\",\n    alignItems: \"flex-end\",\n    children: _jsx(Text, {\n      color: \"white\",\n      children: \"Open\"\n    })\n  });\n\n  var translateX = useSharedValue(0);\n\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      screenWidth = _Dimensions$get.width;\n\n  var XThreshold = screenWidth * .3;\n  var panGesture = useAnimatedGestureHandler({\n    onActive: function () {\n      var _f = function _f(event) {\n        if (event.translationX > 0) {\n          event.translationX = 0;\n        } else {\n          translateX.value = event.translationX;\n        }\n      };\n\n      _f._closure = {\n        translateX: translateX\n      };\n      _f.asString = \"function _f(event){const{translateX}=jsThis._closure;{if(event.translationX>0){event.translationX=0;}else{translateX.value=event.translationX;}}}\";\n      _f.__workletHash = 16731338287280;\n      _f.__location = \"C:\\\\Users\\\\jjleo\\\\Documents\\\\WDMM\\\\Term_4\\\\Nimble\\\\nimble-project\\\\client\\\\src\\\\component\\\\listItems\\\\tasks\\\\EachTasks.js (20:23)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(event) {\n        if (event.translationX > 0) {\n          null;\n        } else if (translateX.value < XThreshold) {\n          runOnJS(handleShowModal)(true);\n        }\n\n        translateX.value = withTiming(0);\n      };\n\n      _f._closure = {\n        translateX: translateX,\n        XThreshold: XThreshold,\n        runOnJS: runOnJS,\n        handleShowModal: handleShowModal,\n        withTiming: withTiming\n      };\n      _f.asString = \"function _f(event){const{translateX,XThreshold,runOnJS,handleShowModal,withTiming}=jsThis._closure;{if(event.translationX>0){null;}else if(translateX.value<XThreshold){runOnJS(handleShowModal)(true);}translateX.value=withTiming(0);}}\";\n      _f.__workletHash = 12868296254291;\n      _f.__location = \"C:\\\\Users\\\\jjleo\\\\Documents\\\\WDMM\\\\Term_4\\\\Nimble\\\\nimble-project\\\\client\\\\src\\\\component\\\\listItems\\\\tasks\\\\EachTasks.js (27:20)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  var animatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: [{\n          translateX: translateX.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      translateX: translateX\n    };\n    _f.asString = \"function _f(){const{translateX}=jsThis._closure;{return{transform:[{translateX:translateX.value}]};}}\";\n    _f.__workletHash = 5449807444231;\n    _f.__location = \"C:\\\\Users\\\\jjleo\\\\Documents\\\\WDMM\\\\Term_4\\\\Nimble\\\\nimble-project\\\\client\\\\src\\\\component\\\\listItems\\\\tasks\\\\EachTasks.js (37:47)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n\n  var mainTaskView = _jsxs(HStack, {\n    bg: colors.gray,\n    px: \"6\",\n    py: \"5\",\n    borderRadius: \"15\",\n    children: [_jsxs(VStack, {\n      children: [_jsx(Text, {\n        fontSize: \"19\",\n        children: task\n      }), _jsx(Text, {\n        fontSize: \"11\",\n        mt: \"2\",\n        children: \"Due: Wed Jan 26 2022 | 12:00 PM  | 1 Hour\"\n      })]\n    }), _jsxs(HStack, {\n      space: \"3\",\n      maxW: \"2\",\n      children: [_jsx(AntDesign, {\n        name: \"user\",\n        size: 14,\n        color: \"black\"\n      }), _jsx(AntDesign, {\n        name: \"user\",\n        size: 14,\n        color: \"black\"\n      }), _jsx(AntDesign, {\n        name: \"user\",\n        size: 14,\n        color: \"black\"\n      }), _jsx(AntDesign, {\n        name: \"user\",\n        size: 14,\n        color: \"black\"\n      })]\n    })]\n  });\n\n  return _jsx(_Fragment, {\n    children: _jsxs(Center, {\n      mb: 3,\n      position: \"relative\",\n      children: [openButton, _jsx(PanGestureHandler, {\n        onGestureEvent: panGesture,\n        children: _jsx(Animated.View, {\n          style: [{\n            width: \"80%\"\n          }, animatedStyle],\n          children: mainTaskView\n        })\n      })]\n    }, i)\n  });\n}","map":{"version":3,"sources":["C:/Users/jjleo/Documents/WDMM/Term_4/Nimble/nimble-project/client/src/component/listItems/tasks/EachTasks.js"],"names":["HStack","Text","Center","Button","VStack","colors","Swipeable","AntDesign","Animated","event","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useSharedValue","withTiming","PanGestureHandler","EachTask","task","handleShowModal","i","openButton","black","translateX","Dimensions","get","screenWidth","width","XThreshold","panGesture","onActive","translationX","value","onEnd","animatedStyle","transform","mainTaskView","gray"],"mappings":"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","sourcesContent":["import { HStack, Text, Center, Button, VStack} from \"native-base\"\r\nimport {colors} from \"../../utilis/colors\"\r\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport { Dimensions, Platform} from 'react-native';\r\nimport Animated, { event, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming } from \"react-native-reanimated\";\r\nimport { PanGestureHandler } from \"react-native-gesture-handler\";\r\n\r\nexport default function EachTask ({task, handleShowModal, i}) {\r\n        const openButton =  <Center bg={colors.black} borderRadius=\"15\" position=\"absolute\" top=\"0\" w=\"80%\"\r\n                            px=\"6\" py=\"9\" alignItems=\"flex-end\">\r\n                            <Text color=\"white\">Open</Text>\r\n                            </Center> \r\n\r\n        const translateX = useSharedValue(0)\r\n        const {width : screenWidth} = Dimensions.get(\"window\")\r\n        const XThreshold = screenWidth * .3\r\n\r\n        const panGesture = useAnimatedGestureHandler({\r\n            onActive : event=>{\r\n                if(event.translationX > 0){\r\n                    event.translationX = 0\r\n                } else {\r\n                    translateX.value = event.translationX\r\n                }\r\n            },\r\n            onEnd : event=>{\r\n                if(event.translationX > 0){\r\n                    null\r\n                } else if(translateX.value < XThreshold){\r\n                    runOnJS(handleShowModal)(true)\r\n                }\r\n                translateX.value = withTiming(0)\r\n            }\r\n        })\r\n\r\n        const animatedStyle = useAnimatedStyle(()=>(\r\n            {\r\n                transform : [{\r\n                    translateX : translateX.value\r\n                }]\r\n            }\r\n        ))\r\n\r\n    const mainTaskView = \r\n                        <HStack bg={colors.gray}  px=\"6\" py=\"5\" borderRadius=\"15\">   \r\n                            <VStack>           \r\n                                <Text fontSize=\"19\">{task}</Text> \r\n                                <Text fontSize=\"11\" mt=\"2\">Due: Wed Jan 26 2022 | 12:00 PM  | 1 Hour</Text>\r\n                            </VStack> \r\n                            <HStack space=\"3\" maxW=\"2\">\r\n                            <AntDesign name=\"user\" size={14} color=\"black\" />\r\n                            <AntDesign name=\"user\" size={14} color=\"black\" />\r\n                            <AntDesign name=\"user\" size={14} color=\"black\" />\r\n                            <AntDesign name=\"user\" size={14} color=\"black\" />   \r\n                            </HStack>                \r\n                        </HStack>\r\n\r\n\r\n    return (\r\n        <>\r\n        <Center mb={3} key={i} position=\"relative\">\r\n                {openButton}\r\n                 <PanGestureHandler onGestureEvent={panGesture}>\r\n                    <Animated.View style={[{width : \"80%\"},animatedStyle]}>\r\n                        {mainTaskView}\r\n                    </Animated.View>\r\n                </PanGestureHandler>\r\n\r\n            </Center>\r\n            </>\r\n        \r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}